#ifndef SPHSCRIPTENGINE_H
#define SPHSCRIPTENGINE_H

#include "angelscript.h"
#include "QList"
#include "QString"
#include "spherror.h"
#include "QMap"
#include "iostream"

//we pass through all the relevant functions
//except we do our own error handling internally
//furthermore, we keep track of all the functions
//so we can later use them in the toolbox

typedef struct ScriptFunctionInfo
{
    bool is_member = false;
    bool is_constructor = false;
    asITypeInfo * ObjectType = nullptr;
    QString ObjectName = "";
    asIScriptFunction * Function;
    QString Description;
    QList<QString> ParameterTypes;
    QList<QString> Parameters;
    QList<QString> ParameterDescription;
    QString ReturnName;
    QString ReturnDescription;

} ScriptFunctionInfo;


class SPHScriptEngine : public asIScriptEngine
{

private:
    asIScriptEngine * m_ASEngine = nullptr;

    QMap<QString, int> m_DescriptionMap;

    //function descriptions
    QList<QString> m_FunctionNames;
    QList<QString> m_FunctionDescriptions;
    QList<QString> m_ReturnNames;
    QList<QString> m_ReturnDescriptions;
    QList<QList<QString>> m_ParameterTypes;
    QList<QList<QString>> m_ParameterNames;
    QList<QList<QString>> m_ParameterDescriptions;

public:

    inline SPHScriptEngine(asIScriptEngine * ASEngine)
    {
        m_ASEngine = ASEngine;

        m_FunctionDescriptions.clear();
        m_ParameterDescriptions.clear();
        m_ReturnDescriptions.clear();
        m_FunctionNames.clear();
        m_ParameterNames.clear();
        m_ReturnNames.clear();
    }


public:

    //////////////////
    ///this is specific functionality for our scripting needs
    //////////////////


    inline void RegisterFunctionDescriptions(QStringList file)
    {
        QStringList empty;
        QList<QString> parameternames;
        QList<QString> parameterdescriptions;
        QString s_multi;
        bool first_found = false;
        bool element_is_function = false;
        bool element_is_return = false;
        bool element_old_is_function = false;
        bool element_old_is_return = false;
        for(int i = 0;i < file.length(); i++)
        {
            QString s = file.at(i).trimmed();
            bool new_element= false;



            if(s.startsWith("#")) //new function description
            {
                QString name = s;
                int indexofpar = s.indexOf('(');
                if(indexofpar != -1)
                {
                    name = name.mid(0,indexofpar);
                    int indexofparend = s.indexOf(')',indexofpar+1);
                    if(indexofparend > indexofpar)
                    {
                        QString parameters = s.mid(indexofpar+1,indexofparend-indexofpar-1);
                        QStringList partypes = parameters.split(",");
                        m_ParameterTypes.append(partypes);
                    }else {
                        m_ParameterTypes.append(empty);
                    }
                }else {
                    m_ParameterTypes.append(empty);
                }

                m_FunctionNames.append(name.right(name.length()-1));
                m_DescriptionMap.insertMulti(name.right(name.length()-1),m_FunctionNames.length()-1);

                new_element = true;
                element_old_is_return = element_is_return;
                element_old_is_function = element_is_function;
                element_is_function = true;
                element_is_return = false;

            }else if(s.startsWith("@")) //new parameter description
            {
                if(s.startsWith("@return")) //new parameter description
                {
                    m_ReturnNames.append(s.right(s.length()-7));

                    new_element = true;

                    element_old_is_return = element_is_return;
                    element_old_is_function = element_is_function;
                    element_is_function = false;
                    element_is_return = true;

                    first_found = true;
                }else if(s.startsWith("@param"))
                {
                    parameternames.append(s.right(s.length()-1));
                    new_element = true;

                    element_old_is_return = element_is_return;
                    element_old_is_function = element_is_function;
                    element_is_function = false;
                    element_is_return = true;

                    first_found = true;
                }

            }else //add to current object
            {
                s_multi.append(s + " ");
            }

            if(new_element || i == file.length()-1)
            {
                //if( first_found )
                {
                    if(element_old_is_return)
                    {
                        m_ReturnDescriptions.append(s_multi);
                    }else if(element_old_is_function)
                    {
                        m_FunctionDescriptions.append(s_multi);
                    }else {
                        parameterdescriptions.append(s_multi);
                    }
                }

                s_multi.clear();
            }


            if(s.startsWith("#") || i == file.length()-1)
            {
                //store parameter stuff
                m_ParameterNames.append(parameternames);
                m_ParameterDescriptions.append(parameterdescriptions);

                parameternames.clear();
                parameterdescriptions.clear();
            }


        }
    }

    inline QString GetUITypeName(int in_typeid)
    {

        m_Types.append("Map");
        m_Types.append("GeoProjection");
        m_Types.append("Shapes");
        m_Types.append("Table");
        m_Types.append("PointCloud");
        m_Types.append("MapArray");
        m_Types.append("bool");
        m_Types.append("double");
        m_Types.append("float");
        m_Types.append("int");

    }

    inline QString GetBaseTypeName(int in_typeid)
    {



    }

    inline QString GetBaseTypeName(int in_typeid)
    {
        if(in_typeid == asTYPEID_VOID)
        {
            return "void";
        }
        //The type id for void.

        if(in_typeid == asTYPEID_BOOL)
        {
            return "bool";
        }
        //The type id for bool.

        if(in_typeid == asTYPEID_INT8)
        {
            return "integer (8)";
        }
        //The type id for int8.

        if(in_typeid == asTYPEID_INT16)
        {
            return "integer (16)";
        }
        //The type id for int16.

        if(in_typeid == asTYPEID_INT32)
        {
            return "integer (32)";
        }
        //The type id for int.

        if(in_typeid == asTYPEID_INT64)
        {
            return "integer (64)";
        }
        //The type id for int64.

        if(in_typeid == asTYPEID_UINT8)
        {
            return "unsigned integer (8)";
        }
        //The type id for uint8.

        if(in_typeid == asTYPEID_UINT16)
        {
            return "unsigned integer (16)";
        }
        //The type id for uint16.

        if(in_typeid == asTYPEID_UINT32)
        {
            return "unsigned integer (32)";
        }
        //The type id for uint.

        if(in_typeid == asTYPEID_UINT64)
        {
            return "unsigned integer (64)";
        }
        //The type id for uint64.

        if(in_typeid == asTYPEID_FLOAT)
        {
            return "float (32)";
        }
        //The type id for float.

        if(in_typeid == asTYPEID_DOUBLE)
        {
            return "double (64)";
        }
        //The type id for double.

        return "void";

    }


    ////Get the information on the currently registered stuff

    inline QList<QString> GetGlobalFunctionStringList()
    {
        QList<QString> ret;
        for( int n = 0; n < (asUINT)m_ASEngine->GetGlobalFunctionCount(); n++ )
        {
            asIScriptFunction *func = m_ASEngine->GetGlobalFunctionByIndex(n);

            // Skip the functions that start with _ as these are not meant to be called explicitly by the user
            if( func->GetName()[0] != '_' )
            {
                ret.append(QString(" ")+func->GetDeclaration());
            }

        }

        return ret;
    }

    inline QList<ScriptFunctionInfo> GetConstructorFunctionList()
    {
        QList<ScriptFunctionInfo> ret;

        uint count = GetObjectTypeCount();
        for(uint i = 0; i < count; i++)
        {
            asITypeInfo * ti = GetObjectTypeByIndex(i);
            QString name = QString(ti->GetName());
            for(uint j = 0; j < ti->GetFactoryCount(); j++)
            {
                ScriptFunctionInfo fi;
                asIScriptFunction *func = ti->GetFactoryByIndex(j);
                fi.Function = func;
                fi.is_member = true;
                fi.is_constructor = true;
                fi.ObjectName = name;
                fi.ObjectType = ti;

                ret.append(fi);
            }
        }

        return ret;
    }

    inline QList<ScriptFunctionInfo> GetMemberFunctionList()
    {
        QList<ScriptFunctionInfo> ret;

        uint count = GetObjectTypeCount();
        for(uint i = 0; i < count; i++)
        {
            asITypeInfo * ti = GetObjectTypeByIndex(i);
            QString name = QString(ti->GetName());
            for(uint j = 0; j < ti->GetMethodCount(); j++)
            {
                ScriptFunctionInfo fi;
                asIScriptFunction *func = ti->GetMethodByIndex(j);
                fi.Function = func;
                fi.is_member = true;
                fi.ObjectName = name;
                fi.ObjectType = ti;

                ret.append(fi);
            }
        }

        return ret;
    }

    inline QList<ScriptFunctionInfo> GetGlobalFunctionList()
    {

        QList<ScriptFunctionInfo> ret;
        for( int n = 0; n < (asUINT)m_ASEngine->GetGlobalFunctionCount(); n++ )
        {
            ScriptFunctionInfo fi;
            asIScriptFunction *func = m_ASEngine->GetGlobalFunctionByIndex(n);
            fi.Function = func;

            // Skip the functions that start with _ as these are not meant to be called explicitly by the user
            QString name = func->GetName();
            if( name[0] != '_' )

            {   int index_final = -1;
                //func function description
                QList<int> indices = m_DescriptionMap.values(name);

                for(int i = 0; i < indices.length(); i++)
                {
                    bool found_exact = false;
                    int index = indices.at(i);
                    if(m_FunctionNames.at(index) == name)
                    {
                        if(m_ParameterTypes.at(index).length() > 0)
                        {
                            bool parameters_same = true;
                            if(m_ParameterTypes.at(index).length() == func->GetParamCount())
                            {
                                for(int j = 0; j < m_ParameterTypes.at(index).length(); j++)
                                {
                                    int Typeid = 0;
                                    func->GetParam(j,&Typeid);
                                    QString Typename;
                                    asITypeInfo * ti = GetTypeInfoById(Typeid);
                                    if(ti != nullptr)
                                    {
                                        Typename = QString(ti->GetName());
                                    }else
                                    {
                                        Typename = GetBaseTypeName(Typeid);
                                    }

                                    std::cout << Typename.toStdString() << " " <<m_ParameterTypes.at(index).at(j).toStdString()  << std::endl;
                                    if(!(m_ParameterTypes.at(index).at(j).compare(Typename,Qt::CaseInsensitive) == 0))
                                    {
                                        parameters_same = false;
                                        break;
                                    }

                                }
                            }else {
                                parameters_same = false;
                            }

                            if(parameters_same)
                            {
                                found_exact = true;
                                index_final = index;
                            }
                        }else {
                            index_final = index;
                        }
                    }
                    if(found_exact == true)
                    {
                        break;
                    }
                }

                //if we found a function description
                if(index_final >= 0)
                {
                    fi.Parameters = m_ParameterNames.at(index_final);
                    fi.Description = m_FunctionDescriptions.at(index_final);
                    fi.ReturnName = m_ReturnNames.at(index_final);
                    fi.ParameterDescription = m_ParameterDescriptions.at(index_final);
                    fi.ReturnDescription = m_ReturnDescriptions.at(index_final);
                    fi.ParameterTypes = m_ParameterTypes.at(index_final);

                }
                //append function
                ret.append(fi);
            }

        }

        return ret;
    }


    inline QList<QString> GetTypeList()
    {

    }

    inline QList<QString> GetTypeMethodList(QString type)
    {

    }



    //////////////////
    ///this is the normal engine functionality
    //////////////////
    ///

    // Memory management
    inline int AddRef() const { return m_ASEngine->AddRef();}
    inline int Release() const { return m_ASEngine->Release();}
    inline int ShutDownAndRelease(){ return m_ASEngine->ShutDownAndRelease();}

    // Engine properties
    inline  int     SetEngineProperty(asEEngineProp property, asPWORD value){ return m_ASEngine->SetEngineProperty(property, value);}
    inline  asPWORD GetEngineProperty(asEEngineProp property)const { return m_ASEngine->GetEngineProperty(property);}

    // Compiler messages
    inline  int SetMessageCallback(const asSFuncPtr &callback, void *obj, asDWORD callConv){ return m_ASEngine->SetMessageCallback(callback, obj, callConv);}
    inline  int ClearMessageCallback(){ return m_ASEngine->ClearMessageCallback();}
    inline  int WriteMessage(const char *section, int row, int col, asEMsgType type, const char *message){ return m_ASEngine->WriteMessage(section, row, col, type, message);}

    // JIT Compiler
    inline  int SetJITCompiler(asIJITCompiler *compiler){ return m_ASEngine->SetJITCompiler(compiler);}
    inline  asIJITCompiler *GetJITCompiler() const { return m_ASEngine->GetJITCompiler();}




    // Global functions
    inline  int                RegisterGlobalFunction(const char *declaration, const asSFuncPtr &funcPointer, asDWORD callConv, void *auxiliary = 0)
    {
        int r =m_ASEngine->RegisterGlobalFunction(declaration, funcPointer, callConv, auxiliary);
        if(r < 0)
        {
            SPH_DEBUG("Error in registering global function: " + QString(declaration));
        }
        return r;
    }
    inline  asUINT             GetGlobalFunctionCount() const { return m_ASEngine->GetGlobalFunctionCount();}
    inline  asIScriptFunction *GetGlobalFunctionByIndex(asUINT index) const { return m_ASEngine->GetGlobalFunctionByIndex(index);}
    inline  asIScriptFunction *GetGlobalFunctionByDecl(const char *declaration) const { return m_ASEngine->GetGlobalFunctionByDecl(declaration) ;}

    // Global properties
    inline  int    RegisterGlobalProperty(const char *declaration, void *pointer)
    {

        return m_ASEngine->RegisterGlobalProperty( declaration, pointer);
    }
    inline  asUINT GetGlobalPropertyCount() const { return m_ASEngine->GetGlobalPropertyCount();}
    inline  int    GetGlobalPropertyByIndex(asUINT index, const char **name, const char **nameSpace = 0, int *typeId = 0, bool *isConst = 0, const char **configGroup = 0, void **pointer = 0, asDWORD *accessMask = 0) const { return m_ASEngine->GetGlobalPropertyByIndex(index, name, nameSpace , typeId , isConst, configGroup, pointer, accessMask) ;}
    inline  int    GetGlobalPropertyIndexByName(const char *name) const { return m_ASEngine->GetGlobalPropertyIndexByName(name);}
    inline  int    GetGlobalPropertyIndexByDecl(const char *decl) const { return m_ASEngine->GetGlobalPropertyIndexByDecl(decl);}

    // Object types
    inline  int            RegisterObjectType(const char *obj, int byteSize, asDWORD flags)
    {
        int r =  m_ASEngine->RegisterObjectType(obj,byteSize,flags);
        if(r < 0)
        {
            SPH_DEBUG("Error in registering object type: " + QString(obj));
        }
        return r;
    }
    inline  int            RegisterObjectProperty(const char *obj, const char *declaration, int byteOffset, int compositeOffset = 0, bool isCompositeIndirect = false) { return m_ASEngine->RegisterObjectProperty(obj,declaration, byteOffset,compositeOffset,isCompositeIndirect);}
    inline  int            RegisterObjectMethod(const char *obj, const char *declaration, const asSFuncPtr &funcPointer, asDWORD callConv, void *auxiliary = 0, int compositeOffset = 0, bool isCompositeIndirect = false)
    {
        int r = m_ASEngine->RegisterObjectMethod(obj,declaration, funcPointer,  callConv, auxiliary, compositeOffset , isCompositeIndirect);
        if( r < 0)
        {
            SPH_DEBUG("Error in registering object method: " + QString(obj) + " " + QString(declaration));
        }
        return r;
    }
    inline  int            RegisterObjectBehaviour(const char *obj, asEBehaviours behaviour, const char *declaration, const asSFuncPtr &funcPointer, asDWORD callConv, void *auxiliary = 0, int compositeOffset = 0, bool isCompositeIndirect = false)
    {
        int r = m_ASEngine->RegisterObjectBehaviour(obj, behaviour, declaration,funcPointer, callConv,auxiliary , compositeOffset , isCompositeIndirect);
        if(r < 0)
        {
            SPH_DEBUG("Error in registering object behavior: " + QString(obj) + " declared as: " + QString(declaration));
        }
        return r;
    }
    inline  int            RegisterInterface(const char *name) { return m_ASEngine->RegisterInterface(name);}
    inline  int            RegisterInterfaceMethod(const char *intf, const char *declaration) { return m_ASEngine->RegisterInterfaceMethod(intf, declaration);}
    inline  asUINT         GetObjectTypeCount() const { return m_ASEngine->GetObjectTypeCount();}
    inline  asITypeInfo   *GetObjectTypeByIndex(asUINT index) const { return m_ASEngine->GetObjectTypeByIndex(index);}

    // String factory
    inline  int RegisterStringFactory(const char *datatype, asIStringFactory *factory) { return m_ASEngine->RegisterStringFactory(datatype, factory);}
    inline  int GetStringFactoryReturnTypeId(asDWORD *flags = 0) const { return m_ASEngine->GetStringFactoryReturnTypeId(flags = 0);}

    // Default array type
    inline  int RegisterDefaultArrayType(const char *type) { return m_ASEngine->RegisterDefaultArrayType(type);}
    inline  int GetDefaultArrayTypeId() const { return m_ASEngine->GetDefaultArrayTypeId();}

    // Enums
    inline  int          RegisterEnum(const char *type) { return m_ASEngine->RegisterEnum(type);}
    inline  int          RegisterEnumValue(const char *type, const char *name, int value) { return m_ASEngine->RegisterEnumValue(type,name, value);}
    inline  asUINT       GetEnumCount() const { return m_ASEngine->GetEnumCount();}
    inline  asITypeInfo *GetEnumByIndex(asUINT index) const { return m_ASEngine->GetEnumByIndex(index);}

    // Funcdefs
    inline  int          RegisterFuncdef(const char *decl) { return m_ASEngine->RegisterFuncdef(decl);}
    inline  asUINT       GetFuncdefCount() const { return m_ASEngine->GetFuncdefCount();}
    inline  asITypeInfo *GetFuncdefByIndex(asUINT index) const { return m_ASEngine->GetFuncdefByIndex(index);}

    // Typedefs
    inline  int          RegisterTypedef(const char *type, const char *decl) { return m_ASEngine->RegisterTypedef(type, decl) ;}
    inline  asUINT       GetTypedefCount() const { return m_ASEngine->GetTypedefCount();}
    inline  asITypeInfo *GetTypedefByIndex(asUINT index) const { return m_ASEngine->GetTypedefByIndex(index);}

    // Configuration groups
    inline  int         BeginConfigGroup(const char *groupName) { return m_ASEngine->BeginConfigGroup(groupName);}
    inline  int         EndConfigGroup() { return m_ASEngine->EndConfigGroup();}
    inline  int         RemoveConfigGroup(const char *groupName) { return m_ASEngine->RemoveConfigGroup(groupName);}
    inline  asDWORD     SetDefaultAccessMask(asDWORD defaultMask) { return m_ASEngine->SetDefaultAccessMask(defaultMask);}
    inline  int         SetDefaultNamespace(const char *nameSpace) { return m_ASEngine->SetDefaultNamespace(nameSpace);}
    inline  const char *GetDefaultNamespace() const { return m_ASEngine->GetDefaultNamespace();}

    // Script modules
    inline  asIScriptModule *GetModule(const char *module, asEGMFlags flag = asGM_ONLY_IF_EXISTS) { return m_ASEngine->GetModule(module, flag);}
    inline  int              DiscardModule(const char *module) { return m_ASEngine->DiscardModule(module);}
    inline  asUINT           GetModuleCount() const { return m_ASEngine->GetModuleCount();}
    inline  asIScriptModule *GetModuleByIndex(asUINT index) const { return m_ASEngine->GetModuleByIndex(index);}

    // Script functions
    inline  asIScriptFunction *GetFunctionById(int funcId) const { return m_ASEngine->GetFunctionById(funcId);}

    // Type identification
    inline  int            GetTypeIdByDecl(const char *decl) const { return m_ASEngine->GetTypeIdByDecl(decl);}
    inline  const char    *GetTypeDeclaration(int typeId, bool includeNamespace = false) const { return m_ASEngine->GetTypeDeclaration(typeId, includeNamespace);}
    inline  int            GetSizeOfPrimitiveType(int typeId) const { return m_ASEngine->GetSizeOfPrimitiveType(typeId);}
    inline  asITypeInfo   *GetTypeInfoById(int typeId) const { return m_ASEngine->GetTypeInfoById(typeId);}
    inline  asITypeInfo   *GetTypeInfoByName(const char *name) const { return m_ASEngine->GetTypeInfoByName(name) ;}
    inline  asITypeInfo   *GetTypeInfoByDecl(const char *decl) const { return m_ASEngine->GetTypeInfoByDecl(decl);}

    // Script execution
    inline  asIScriptContext      *CreateContext() { return m_ASEngine->CreateContext();}
    inline  void                  *CreateScriptObject(const asITypeInfo *type) { return m_ASEngine->CreateScriptObject(type);}
    inline  void                  *CreateScriptObjectCopy(void *obj, const asITypeInfo *type) { return m_ASEngine->CreateScriptObjectCopy(obj, type);}
    inline  void                  *CreateUninitializedScriptObject(const asITypeInfo *type) { return m_ASEngine->CreateUninitializedScriptObject(type);}
    inline  asIScriptFunction     *CreateDelegate(asIScriptFunction *func, void *obj) { return m_ASEngine->CreateDelegate(func, obj);}
    inline  int                    AssignScriptObject(void *dstObj, void *srcObj, const asITypeInfo *type) { return m_ASEngine->AssignScriptObject(dstObj, srcObj, type);}
    inline  void                   ReleaseScriptObject(void *obj, const asITypeInfo *type) { return m_ASEngine->ReleaseScriptObject(obj, type);}
    inline  void                   AddRefScriptObject(void *obj, const asITypeInfo *type) { return m_ASEngine->AddRefScriptObject(obj, type);}
    inline  int                    RefCastObject(void *obj, asITypeInfo *fromType, asITypeInfo *toType, void **newPtr, bool useOnlyImplicitCast = false) { return m_ASEngine->RefCastObject(obj, fromType, toType,newPtr,useOnlyImplicitCast);}
    inline  asILockableSharedBool *GetWeakRefFlagOfScriptObject(void *obj, const asITypeInfo *type) const { return m_ASEngine->GetWeakRefFlagOfScriptObject(obj, type);}

    // Context pooling
    inline  asIScriptContext      *RequestContext() { return m_ASEngine->RequestContext();}
    inline  void                   ReturnContext(asIScriptContext *ctx) { return m_ASEngine->ReturnContext(ctx);}
    inline  int                    SetContextCallbacks(asREQUESTCONTEXTFUNC_t requestCtx, asRETURNCONTEXTFUNC_t returnCtx, void *param = 0) { return m_ASEngine->SetContextCallbacks(requestCtx, returnCtx, param);}

    // String interpretation
    inline  asETokenClass ParseToken(const char *string, size_t stringLength = 0, asUINT *tokenLength = 0) const { return m_ASEngine->ParseToken(string, stringLength, tokenLength);}

    // Garbage collection
    inline  int  GarbageCollect(asDWORD flags = asGC_FULL_CYCLE, asUINT numIterations = 1) { return m_ASEngine->GarbageCollect(flags, numIterations);}
    inline  void GetGCStatistics(asUINT *currentSize, asUINT *totalDestroyed = 0, asUINT *totalDetected = 0, asUINT *newObjects = 0, asUINT *totalNewDestroyed = 0) const { return m_ASEngine->GetGCStatistics(currentSize,totalDestroyed , totalDetected ,newObjects, totalNewDestroyed);}
    inline  int  NotifyGarbageCollectorOfNewObject(void *obj, asITypeInfo *type) { return m_ASEngine->NotifyGarbageCollectorOfNewObject(obj, type);}
    inline  int  GetObjectInGC(asUINT idx, asUINT *seqNbr = 0, void **obj = 0, asITypeInfo **type = 0) { return m_ASEngine->GetObjectInGC(idx,seqNbr, obj,type);}
    inline  void GCEnumCallback(void *reference) { return m_ASEngine->GCEnumCallback(reference);}
    inline  void ForwardGCEnumReferences(void *ref, asITypeInfo *type) { return m_ASEngine->ForwardGCEnumReferences(ref, type);}
    inline  void ForwardGCReleaseReferences(void *ref, asITypeInfo *type) { return m_ASEngine->ForwardGCReleaseReferences(ref, type);}
    inline  void SetCircularRefDetectedCallback(asCIRCULARREFFUNC_t callback, void *param = 0) { return m_ASEngine->SetCircularRefDetectedCallback(callback,param );}

    // User data
    inline  void *SetUserData(void *data, asPWORD type = 0) { return m_ASEngine->SetUserData(data, type);}
    inline  void *GetUserData(asPWORD type = 0) const { return m_ASEngine->GetUserData(type);}
    inline  void  SetEngineUserDataCleanupCallback(asCLEANENGINEFUNC_t callback, asPWORD type = 0) { return m_ASEngine->SetEngineUserDataCleanupCallback(callback,type);}
    inline  void  SetModuleUserDataCleanupCallback(asCLEANMODULEFUNC_t callback, asPWORD type = 0) { return m_ASEngine->SetModuleUserDataCleanupCallback(callback,type );}
    inline  void  SetContextUserDataCleanupCallback(asCLEANCONTEXTFUNC_t callback, asPWORD type = 0) { return m_ASEngine->SetContextUserDataCleanupCallback(callback,type) ;}
    inline  void  SetFunctionUserDataCleanupCallback(asCLEANFUNCTIONFUNC_t callback, asPWORD type = 0) { return m_ASEngine->SetFunctionUserDataCleanupCallback(callback, type);}
    inline  void  SetTypeInfoUserDataCleanupCallback(asCLEANTYPEINFOFUNC_t callback, asPWORD type = 0) { return m_ASEngine->SetTypeInfoUserDataCleanupCallback(callback, type);}
    inline  void  SetScriptObjectUserDataCleanupCallback(asCLEANSCRIPTOBJECTFUNC_t callback, asPWORD type = 0) { return m_ASEngine->SetScriptObjectUserDataCleanupCallback(callback, type);}

    // Exception handling
    inline  int SetTranslateAppExceptionCallback(asSFuncPtr callback, void *param, int callConv) { return m_ASEngine->SetTranslateAppExceptionCallback(callback, param,  callConv);}

};


#endif // SPHSCRIPTENGINE_H
